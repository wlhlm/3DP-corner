[include glyphs.cfg]

# common display settings
[display]
menu_timeout: 180

[delayed_gcode REPLACE_SPLASH_SCREEN]
initial_duration: 4
gcode:
    SET_DISPLAY_GROUP GROUP=__custom_display

# redefine status display
[display_data __custom_display extruder]
position: 0, 0
text:
    {% set active_extruder = printer.toolhead.extruder %}
    {render("_animated_heater_temperature", param_heater_name=active_extruder)}

[display_data __custom_display fan]
position: 0, 10
text:
    {render("_fan_speed")}

[display_data __custom_display bed]
position: 1, 0
text:
    {render("_animated_heater_temperature", param_heater_name="heater_bed")}

[display_data __custom_display print_progress]
position: 1, 10
text:
    {"{:^6.0%}".format(printer.display_status.progress)}

[display_data __custom_display progress_bar]
position: 1, 10 # Draw graphical progress bar after text is written
text:
    {draw_progress_bar(1, 10, 6, printer.display_status.progress)}

[display_data __custom_display printing_time]
position: 2, 10
text:
    {"%6s" % (render("_printing_time").strip(),)}

[display_data __custom_display chamber]
position: 2, 0
text:
    {% set chamber_sensor_name = printer["gcode_macro _GLOBALS"].chamber_temperature_sensor_name %}

    {% if chamber_sensor_name != printer.toolhead.extruder %}
        {% set chamber = printer[chamber_sensor_name] %}
        ~chamber~
        {"%3.0f" % (chamber.temperature)}
        ~degrees~
    {% endif %}

[display_data __custom_display print_status]
position: 3, 0
text:
    {% set serial = printer["gcode_macro _GLOBALS"].printer_serial %}
    {% set model = printer["gcode_macro _GLOBALS"].printer_model %}
    {% set make = printer["gcode_macro _GLOBALS"].printer_make %}
    {% if serial != "" %}
        {% set name = serial %}
    {% else %}
        {% set name = model %}
    {% endif %}

    {% if printer.display_status.message %}
        {printer.display_status.message}
    {% elif printer.idle_timeout.printing_time %}
        {% set pos = printer.gcode_move.gcode_position %}
        {% if make == "Voron" %}
            {"%s ~voron~ Z%-5.2f" % (name, pos.z)}
        {% else %}
            {"%s Z%-5.2f" % (name, pos.z)}
        {% endif %}
    {% else %}
        {% if make == "Voron" %}
            {"%s ~voron~" % (name)}
        {% else %}
            {name}
        {% endif %}
    {% endif %}

# based on: https://github.com/Klipper3d/klipper/blob/05a8aca0a84c582e7cca8525f06fd9326b80a685/klippy/extras/display/display.cfg#L13-L37
[display_template _animated_heater_temperature]
param_heater_name: "extruder"
text:
    {% if param_heater_name in printer %}
        {% set heater = printer[param_heater_name] %}
        {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}

        # Show glyph
        {% if param_heater_name == "heater_bed" %}
            {% if heater.target %}
                ~bed_heat{frame}~
            {% else %}
                ~bed~
            {% endif %}
        {% elif param_heater_name == "extruder" %}
            {% if heater.target %}
                ~extruder_animated{frame}~
            {% else %}
                ~extruder~
            {% endif %}
        {% endif %}

        # Show temperature
        { "%3.0f" % (heater.temperature,) }
        # Optionally show target
        {% if heater.target and (heater.temperature - heater.target)|abs > 2 %}
            ~right_arrow~
            { "%0.0f" % (heater.target,) }
        {% endif %}
        ~degrees~
    {% endif %}

# disable default menus
[menu __main __octoprint]
type: disabled

[menu __main __setup __restart]
type: disabled

# Use my own load and unload macros
[menu __main __filament __loadf]
type: disabled

[menu __main __filament __loads]
type: disabled

[menu __main __filament __unloadf]
type: disabled

[menu __main __filament __unloads]
type: disabled

[menu __main __setup __calib __bedprobe]
type: disabled

[menu __main __setup __calib __delta_calib_auto]
type: disabled

[menu __main __setup __calib __delta_calib_man]
type: disabled

# add new menus
[include menu-frontend.cfg]

[include menu-mesh-manual.cfg]

[include menu-bed-screw.cfg]

[include menu-z-endstop-calibrate.cfg]

[include menu-led.cfg]

[include menu-print-time.cfg]

[include menu-plate.cfg]

[include menu-firmware-retraction.cfg]

[menu __main __filament __load]
type: command
name: Load filament
gcode:
    LOAD_FILAMENT

[menu __main __filament __unload]
type: command
name: Unload filament
gcode:
    UNLOAD_FILAMENT

# inspired by https://github.com/zellneralex/klipper_config/blob/4f942107c093aa6e0da0f89886a843b03ea2738b/park_macro.cfg#L75-L96
[menu __main __control __park]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
index: 0
name: Park {["front", "center", "rear", "purge"][menu.input|int]}
input: 0
input_min: 0
input_max: 2
gcode:
    {% if menu.event == "long_click" %}
        {["PARK_FRONT", "PARK_CENTER", "PARK_REAR", "PARK_PURGE"][menu.input|int]}
    {% endif %}

# source: https://github.com/boardthatpowder/klipper-firmware-voron2/blob/2a3f9f224f334ec9b0ace5e8ed946e6a502c521d/menu.cfg#L593-L607
[menu __main __setup __tuning]
type: list
name: PID tuning

[menu __main __setup __tuning __hotend_pid_tuning]
type: command
enable: {not printer.idle_timeout.state == "Printing" and "extruder" in printer}
name: Calibrate hotend
gcode:
    PID_CALIBRATE HEATER=extruder TARGET=240

[menu __main __setup __tuning __hotbed_pid_tuning]
type: command
enable: {not printer.idle_timeout.state == "Printing" and "heater_bed" in printer}
name: Calibrate bed
gcode:
    PID_CALIBRATE HEATER=heater_bed TARGET=105

[menu __main __setup __tuning __save_pid_tuning]
type: command
name: Save config
gcode:
    SAVE_CONFIG

[menu __main __power]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Power control

[menu __main __power __klipper_restart]
type: list
name: Restart Klipper

[menu __main __power __klipper_restart __host]
type: command
name: Restart host
gcode:
    RESTART

[menu __main __power __klipper_restart __firmware]
type: command
name: Restart firmware
gcode:
    FIRMWARE_RESTART

[menu __main __power __reboot]
type: command
name: Reboot RPi
gcode:
    {menu.exit()}
    {action_call_remote_method("reboot_machine")}

[menu __main __power __shutdown]
type: command
name: Shutdown RPi
gcode:
    {menu.exit()}
    {action_call_remote_method("shutdown_machine")}
