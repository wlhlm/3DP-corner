[gcode_macro PARK_PURGE]
description: Move toolhead over the purge bucket
gcode:
    {% set keep_z = params.KEEP_Z|default(0)|int %}

    {% set purge_locations = printer["gcode_macro _GLOBALS"].nozzle_purge_positions %}
    {% set speed = printer["gcode_macro _GLOBALS"].travel_speed|float %}

    {% set index = params.INDEX|default(range(purge_locations|length)|list|random)|int %}
    {% set purge_location = purge_locations[index] %}

    SAVE_GCODE_STATE NAME=state_park_purge
    _CONDITIONAL_HOME
    G90 ; absolute positioning
    G0 X{purge_location[0]} Y{purge_location[1]} {% if keep_z and purge_location | length == 3 %}Z{purge_location[2]}{% endif %} F{speed * 60}
    RESTORE_GCODE_STATE NAME=state_park_purge

[gcode_macro LOAD_FILAMENT]
gcode:
    {% set bowden_length = printer["gcode_macro _GLOBALS"].filament_loading_bowden_length|float %}

    SAVE_GCODE_STATE NAME=state_load_filament
    PARK_PURGE
    M83                       ; set extruder to relative
    G1 E{bowden_length} F1200 ; quickly load filament down the bowden
    G1 E30 F300               ; slower extrusion for hotend path
    G1 E10 F120               ; prime nozzle with filament
    G4 P4000                  ; let filament ooze a little bit
    CLEAN_NOZZLE
    RESTORE_GCODE_STATE NAME=state_load_filament

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set bowden_length = printer["gcode_macro _GLOBALS"].filament_loading_bowden_length|float %}

    SAVE_GCODE_STATE NAME=state_unload_filament
    PARK_PURGE
    M83                             ; set extruder to relative
    G1 E5 F400                      ; extrude a little to soften tip
    G1 E-{bowden_length + 45} F1200 ; retract filament completely
    CLEAN_NOZZLE
    RESTORE_GCODE_STATE NAME=state_unload_filament

[gcode_macro CLEAN_NOZZLE]
description: Rub off icky plastic snot from the nozzle
gcode:
    {% set nozzle_brush_start = printer["gcode_macro _GLOBALS"].nozzle_brush_start %}
    {% set nozzle_brush_end = printer["gcode_macro _GLOBALS"].nozzle_brush_end %}
    {% set nozzle_brush_approach_position = printer["gcode_macro _GLOBALS"].nozzle_brush_approach_position %}
    {% set travel_speed = printer["gcode_macro _GLOBALS"].travel_speed|float %}
    {% set cleaning_speed = printer["gcode_macro _GLOBALS"].nozzle_cleaning_speed|float %}

    {% if not printer.extruder.can_extrude %}
        _PRINT_CONSOLE ERROR=1 T="Extruder too cold to clean. Skipping..."
    {% elif nozzle_brush_start %}
        SAVE_GCODE_STATE NAME=state_clean_nozzle
        _CONDITIONAL_HOME
        G90 ; absolute positioning

        {% if nozzle_brush_approach_position %}
            G0 X{nozzle_brush_approach_position[0]} Y{nozzle_brush_approach_position[1]} {% if nozzle_brush_approach_position | length == 3 %}Z{nozzle_brush_approach_position[2]}{% endif %} F{travel_speed * 60}
        {% endif %}
        G0 X{nozzle_brush_start[0]} Y{nozzle_brush_start[1]} {% if nozzle_brush_start | length == 3 %}Z{nozzle_brush_start[2]}{% endif %} F{travel_speed * 60}
        {% for _ in range(1) %}
            G0 X{nozzle_brush_end[0]} Y{nozzle_brush_end[1]} {% if nozzle_brush_end | length == 3 %}Z{nozzle_brush_end[2]}{% endif %} F{cleaning_speed * 60}
            G0 X{nozzle_brush_start[0]} Y{nozzle_brush_start[1]} {% if nozzle_brush_start | length == 3 %}Z{nozzle_brush_start[2]}{% endif %} F{cleaning_speed * 60}
        {% endfor %}

        {% if nozzle_brush_approach_position | length == 3 %}
            G91 ; relative positioning
            G0 Z25 F{travel_speed * 60}
        {% endif %}
    
        RESTORE_GCODE_STATE NAME=state_clean_nozzle
    {% else %}
        _PRINT_CONSOLE T="No nozzle brush position configured. Skipping..."
    {% endif %}

# deprecated to transition to a more consistent VERB_NOUN command naming
[gcode_macro PRIME_LINE]
description: Legacy alias for PRINT_PRIME_LINE
gcode:
    PRINT_PRIME_LINE {rawparams}

# adapted from: https://github.com/zellneralex/klipper_config/blob/35605447143cb65b5c24bb378dcba4823e8d8a6e/macro.cfg#L395-L423
[gcode_macro PRINT_PRIME_LINE]
description: Primes the hotend with filament to save on printing a skirt
gcode:
    {% set y_offset = params.Y_OFFSET|default(0)|float %}

    {% set prime_length = printer["gcode_macro _GLOBALS"].prime_line_length|float %}
    {% set prime_extrusion = printer["gcode_macro _GLOBALS"].prime_line_extrusion_length|float %}
    {% set prime_height = printer["gcode_macro _GLOBALS"].prime_line_layer_height|float %}
    {% set prime_speed = printer["gcode_macro _GLOBALS"].prime_line_speed|float %}
    {% set travel_speed = printer["gcode_macro _GLOBALS"].travel_speed|float %}

    {% set prime_segments = 15 %}
    {% set segment_length = prime_length|float / prime_segments|int %}
    {% set segment_extrusion = prime_extrusion|float / prime_segments|int %}

    SAVE_GCODE_STATE NAME=state_print_prime_line
    _PRINT_CONSOLE T="Printing prime line"
    _CONDITIONAL_HOME
    G92 E0                                                        ; reset extruder
    G90                                                           ; absolute positioning
    M83
    G0 Y{y_offset} X40 F{travel_speed * 60}                       ; go to tongue of print bed
    G0 Z{prime_height}                                            ; move bed to nozzle
    G91                                                           ; relative positioning
    {% for i in range(prime_segments) %}
        G1 X{segment_length} E{segment_extrusion} F{prime_speed * 60} ; first line
    {% endfor %}
    G0 Y0.4
    {% for i in range(prime_segments) %}
        G1 X-{segment_length} E{segment_extrusion} F{prime_speed * 60} ; second line
    {% endfor %}
    RESTORE_GCODE_STATE NAME=state_print_prime_line
