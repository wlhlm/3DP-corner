# Crude framework for executing recurring tasks such as safety checks. Please note that due to the nature of how Klipper processes GCode, scheduled tasks won't run during long blocking commands such as waiting for heaters to reach a temperature or a simple G4.

[delayed_gcode _SCHEDULER]
initial_duration: 0.1
gcode:
    {% set initial_tasks = printer["gcode_macro _GLOBALS"].scheduler_startup_tasks %}

    SET_GCODE_VARIABLE MACRO=_DISPATCH_SCHEDULER_TASKS VARIABLE=tasks VALUE="{initial_tasks}"
    _DISPATCH_SCHEDULER_TASKS
    UPDATE_DELAYED_GCODE ID=_SCHEDULER DURATION=30

[gcode_macro REGISTER_SCHEDULER_TASK]
gcode:
    {% set task_name = params.MACRO %}

    {% set current_task_list = printer["gcode_macro _DISPATCH_SCHEDULER_TASKS"].tasks %}

    {% set _ = current_task_list.append(task_name) %}
    SET_GCODE_VARIABLE MACRO=_DISPATCH_SCHEDULER_TASKS VARIABLE=tasks VALUE="{current_task_list}"

[gcode_macro UNREGISTER_SCHEDULER_TASK]
gcode:
    {% set task_name = params.MACRO %}

    {% set current_task_list = printer["gcode_macro _DISPATCH_SCHEDULER_TASKS"].tasks %}

    {% set _ = current_task_list.remove(task_name) %}
    SET_GCODE_VARIABLE MACRO=_DISPATCH_SCHEDULER_TASKS VARIABLE=tasks VALUE="{current_task_list}"

[gcode_macro _DISPATCH_SCHEDULER_TASKS]
variable_tasks: []
gcode:
    {% for task in tasks %}
        {task}
    {% endfor %}

[gcode_macro _SCHEDULER_FAN_CHECK]
description: Routinely check fan RPM and shutdown printer if it dips below a given threshold
variable__fail_count: {}
gcode:
    {% set check_fans = printer["gcode_macro _GLOBALS"].monitored_fans %}

    {% if printer.idle_timeout.state == "Printing" %}
        {% for fan in check_fans.keys() %}
            {% set fan_speed_setting = printer[fan].speed|float %}

            {% if fan_speed_setting > 0.0 %}
                {% set current_fan_rpm = printer[fan].rpm|float %}

                {% if current_fan_rpm < check_fans[fan] %}
                    {% if _fail_count > 1 %}
                        ;REMOVE_TOOLHEAD_FROM_PRINT
                        ;{action_emergency_stop("Monitored fan \"%s\" stopped spinning" % fan)}
                        _PRINT_CONSOLE ERROR=1 T="{"Monitored fan \"%s\" stopped spinning" % fan}"
                    {% else %}
                        {% set previous_fail_count = _fail_count[fan] %}
                        {% set _ = _fail_count.update({fan: previous_fail_count + 1}) %}
                        SET_GCODE_VARIABLE MACRO=_SCHEDULER_FAN_CHECK VARIABLE=_fail_count VALUE="{_fail_count}"
                    {% endif %}
                {% else %}
                    {% set _ = _fail_count.update({fan: 0}) %}
                    SET_GCODE_VARIABLE MACRO=_SCHEDULER_FAN_CHECK VARIABLE=_fail_count VALUE="{_fail_count}"
                {% endif %}
            {% endif %}
        {% endfor %}
    {% endif %}
