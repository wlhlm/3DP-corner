[gcode_macro REMOVE_TOOLHEAD_FROM_PRINT]
gcode:
    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set travel_speed = printer["gcode_macro _GLOBALS"].travel_speed|float %}

    # Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    SAVE_GCODE_STATE NAME=state_remove_toolhead_from_print
    G91
    G0 Z{z_safe}                                ; move nozzle up
    G0 X{x_safe} Y{y_safe} F{travel_speed * 60} ; move nozzle to remove stringing
    PARK_PURGE KEEP_Z=1
    RESTORE_GCODE_STATE NAME=state_remove_toolhead_from_print

[gcode_macro PARK_REAR]
gcode:
    {% set safe_z = params.SAFE_Z|default(0)|int %}

    {% set max_x = printer["gcode_macro _GLOBALS"].build_plate_size[0]|float %}
    {% set max_y = printer["gcode_macro _GLOBALS"].build_plate_size[1]|float %}

    _PARK X={max_x / 2} Y={max_y - 10} SAFE_Z="{safe_z}"

[gcode_macro PARK_CENTER]
gcode:
    {% set safe_z = params.SAFE_Z|default(0)|int %}

    {% set max_x = printer["gcode_macro _GLOBALS"].build_plate_size[0]|float %}
    {% set max_y = printer["gcode_macro _GLOBALS"].build_plate_size[1]|float %}

    _PARK X={max_x / 2} Y={max_y / 2} SAFE_Z="{safe_z}"

[gcode_macro PARK_FRONT]
gcode:
    {% set safe_z = params.SAFE_Z|default(0)|int %}

    {% set max_x = printer["gcode_macro _GLOBALS"].build_plate_size[0]|float %}

    _PARK X={max_x / 2} Y=10 SAFE_Z="{safe_z}"

[gcode_macro _PARK]
gcode:
    {% set park_x = params.X|float %}
    {% set park_y = params.Y|float %}
    {% set safe_z = params.SAFE_Z|default(0)|int %}

    {% set safe_z_height = printer["gcode_macro _GLOBALS"].park_safe_z|float %}
    {% set min_z_height = printer["gcode_macro _GLOBALS"].park_min_z|float %}
    {% set speed = printer["gcode_macro _GLOBALS"].travel_speed|float %}

    {% if safe_z != 0 %}
        {% set park_z = safe_z_height %}
    {% elif printer.toolhead.position.z < min_z_height %}
        {% set park_z = min_z_height %}
    {% endif %}

    SAVE_GCODE_STATE NAME=state__park
    _CONDITIONAL_HOME
    G90   ; absolute positioning
    G0 X{park_x} Y{park_y} {% if park_z is defined %}Z{park_z}{% endif %} F{speed * 60}
    RESTORE_GCODE_STATE NAME=state__park

[gcode_macro PARK_PURGE]
description: Move toolhead over the purge bucket
gcode:
    {% set keep_z = params.KEEP_Z|default(0)|int %}

    {% set purge_locations = printer["gcode_macro _GLOBALS"].nozzle_purge_positions %}
    {% set speed = printer["gcode_macro _GLOBALS"].travel_speed|float %}

    {% set index = params.INDEX|default(range(purge_locations|length)|list|random)|int %}
    {% set purge_location = purge_locations[index] %}

    SAVE_GCODE_STATE NAME=state_park_purge
    _CONDITIONAL_HOME
    G90   ; absolute positioning
    G0 X{purge_location[0]} Y{purge_location[1]} {% if not keep_z %}Z{purge_location[2]}{% endif %} F{speed * 60}
    RESTORE_GCODE_STATE NAME=state_park_purge

# based on: https://github.com/AndrewEllis93/Print-Tuning-Guide/blob/bd5dc22529109f94a12d0229f38886ab07bd99fd/Macros/TEST_SPEED.cfg
[gcode_macro TEST_XY_TOPSPEED]
gcode:
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    {% set iterations = params.ITERATIONS|default(5)|int %}
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    {% set bound = params.BOUND|default(20)|int %}

    # Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
    {% set min_x = printer.toolhead.axis_minimum.x + bound %}
    {% set max_x = printer.toolhead.axis_maximum.x - bound %}
    {% set min_y = printer.toolhead.axis_minimum.y + bound %}
    {% set max_y = printer.toolhead.axis_maximum.y - bound %}

    SAVE_GCODE_STATE NAME=state_test_speed
    G90
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel}
    G28

    # Go to starting position
    G0 X{min_x} Y{min_y} Z{bound + 10} F{speed * 60}
    G0 X{min_x} Y{min_y} F{speed * 60}

    {% set diagonal_x = [max_x, max_y] | min %}
    {% set front_left_x = min_x %}
    {% set front_left_y = min_y %}
    {% set back_right_x = diagonal_x %}
    {% set back_right_y = diagonal_x %}

    {% set diagonal_y = [(min_x - max_x)|abs, max_y - min_y] | min %}
    {% set front_right_x = max_x %}
    {% set front_right_y = min_y %}
    {% set back_left_x = max_x - diagonal_y %}
    {% set back_left_y = min_y + diagonal_y %}
    {% for _ in range(iterations) %}
        # Diagonals
        G0 X{front_left_x} Y{front_left_y} F{speed * 60}
        G0 X{back_right_x} Y{back_right_y} F{speed * 60}
        G0 X{front_left_x} Y{front_left_y} F{speed * 60}
        G0 X{front_right_x} Y{front_right_y} F{speed * 60}
        G0 X{back_left_x} Y{back_right_y} F{speed * 60}
        G0 X{front_right_x} Y{front_right_y} F{speed * 60}

        # Box
        G0 X{front_left_x} Y{front_left_y} F{speed * 60}
        G0 X{back_left_x} Y{back_left_y} F{speed * 60}
        G0 X{back_right_x} Y{back_right_y} F{speed * 60}
        G0 X{front_right_x} Y{front_right_y} F{speed * 60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home XY and get position again for comparison:
    G28 X Y
    RESTORE_GCODE_STATE NAME=state_test_speed
