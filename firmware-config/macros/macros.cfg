[include util.cfg]

[include gcodes.cfg]

[include moves.cfg]

[include frontend.cfg]

[include led.cfg]

[include print-time.cfg]

[include homing.cfg]

[include buzzer.cfg]

[include plate.cfg]

# deprecated to transition to more consistent VERB_NOUN command naming
[gcode_macro PRINT_START]
description: Legacy alias for START_PRINT
gcode:
    START_PRINT {rawparams}

[gcode_macro START_PRINT]
description: Called at the beginning of each print job. Takes care of heating bed, extruder, and chamber
variable_extruder_temp: 0
variable_bed_temp: 0
variable_chamber_temp: 0
variable_mesh_area: ''
gcode:
    {% set extruder_temp = params.T_EXTRUDER|int %}
    {% set bed_temp = params.T_BED|int %}
    {% set chamber_temp = params.T_CHAMBER|default(0)|int %}

    {% set chamber_sensor_name = printer["gcode_macro _GLOBALS"].chamber_temperature_sensor_name %}

    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=extruder_temp VALUE={extruder_temp}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=bed_temp VALUE={bed_temp}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=chamber_temp VALUE={chamber_temp}

    CLEAR_PAUSE
    G28
    _CONTROL_BED_RELAY STATE=1
    CONTROL_STATUS_LIGHT STATUS=heating
    {% if chamber_temp != 0 and printer[chamber_sensor_name].temperature < chamber_temp %}
        _PRINT_CONSOLE SHOW_LCD=1 T="Heating bed"
        M190 S{bed_temp} ; wait for bed to reach temperature
        HEAT_SOAK_CHAMBER CHAMBER_TEMPERATURE={chamber_temp} ; HEAT_SOAK_CHAMBER will take care of heating the extruder
    {% else %}
        _PRINT_CONSOLE SHOW_LCD=1 T="Heating bed/extruder"
        M104 S{extruder_temp}
        M190 S{bed_temp}
        M117
        CONTROL_STATUS_LIGHT STATUS=calibrating
        _ALIGN_NOZZLE_WITH_BED
        CONTROL_STATUS_LIGHT STATUS=printing
    {% endif %}

# source: https://canary.discordapp.com/channels/460117602945990666/696930677161197640/774154000823746600
[gcode_macro HEAT_SOAK_DURATION]
description: Heat chamber by circulating radiant bed heat using the part cooling fan until a certain time has passed
gcode:
    {% set duration = params.DURATION|default(10)|int %}

    PARK_CENTER SAFE_Z=1
    BASE_PAUSE
    M106 S255                                                       ; run part cooling fans at full power
    M117                                                            ; clear display
    UPDATE_DELAYED_GCODE ID=_SOAK_DONE_DURATION DURATION={duration * 60}

[gcode_macro HEAT_SOAK_CHAMBER]
description: Heat chamber by circulating radiant bed heat using the part cooling fan until the chamber temperature is reached
variable__chamber_temperature: 0
gcode:
    {% set target = params.CHAMBER_TEMPERATURE|default(0)|int %}

    {% set chamber_sensor_name = printer["gcode_macro _GLOBALS"].chamber_temperature_sensor_name %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK_CHAMBER VARIABLE=_chamber_temperature VALUE={target}

    {% if target != 0 and printer[chamber_sensor_name].temperature < target %}
        PARK_CENTER SAFE_Z=1
        BASE_PAUSE
        M106 S255 ; run part cooling fans at full power
        _PRINT_CONSOLE SHOW_LCD=1 T="Heating chamber"
        UPDATE_DELAYED_GCODE ID=_SOAK_LOOP DURATION=10
    {% else %}
        _SOAK_DONE_CHAMBER
    {% endif %}

[delayed_gcode _SOAK_LOOP]
gcode:
    {% set chamber_sensor = printer["gcode_macro _GLOBALS"].chamber_temperature_sensor_name %}

    {% if printer[chamber_sensor].temperature >= printer["gcode_macro HEAT_SOAK_CHAMBER"]._chamber_temperature|float %}
        _SOAK_DONE_CHAMBER
    {% elif printer.idle_timeout.state != "Idle" %}
        UPDATE_DELAYED_GCODE ID=_SOAK_LOOP DURATION=10
    {% endif %}

# source: https://canary.discordapp.com/channels/460117602945990666/696930677161197640/774154000823746600
[delayed_gcode _SOAK_DONE_DURATION]
gcode:
    _PRINT_CONSOLE T="Heatsoak done"
    BASE_RESUME
    M107 ; turn off cooling fans
    M117

# source: https://canary.discordapp.com/channels/460117602945990666/696930677161197640/774154000823746600
[gcode_macro _SOAK_DONE_CHAMBER]
gcode:
    {% set extruder_temperature = printer["gcode_macro START_PRINT"].extruder_temp %}

    _PRINT_CONSOLE T="Heatsoak done"
    BASE_RESUME
    _PRINT_CONSOLE SHOW_LCD=1 T="Heating extruder"
    CONTROL_STATUS_LIGHT STATUS=heating
    M109 S{extruder_temperature}                   ; wait for extruder to reach temperature
    M107                                           ; turn off cooling fans
    _PRINT_CONSOLE SHOW_LCD=1 T="Cleaning nozzle"
    CLEAN_NOZZLE
    M117
    _ALIGN_NOZZLE_WITH_BED

# source: https://canary.discordapp.com/channels/460117602945990666/696930677161197640/774154000823746600
[gcode_macro SKIP_SOAK_DURATION]
description: Abort chamber heating
gcode:
    UPDATE_DELAYED_GCODE ID=_SOAK_DONE_DURATION DURATION=1

[gcode_macro SKIP_SOAK_CHAMBER]
description: Abort chamber heating
gcode:
    UPDATE_DELAYED_GCODE ID=_SOAK_LOOP DURATION=0
    _SOAK_DONE_CHAMBER

[gcode_macro _ALIGN_NOZZLE_WITH_BED]
description: Makes sure the nozzle accurately follows the bed surface
gcode:
    {% if "quad_gantry_level" in printer and not printer.quad_gantry_level.applied %}
        _PRINT_CONSOLE T="Leveling gantry"
        G32
        _VERIFY_QUAD_GANTRY_LEVEL ; Nested macro necessary here to receive an updated printer variable. See https://www.klipper3d.org/Command_Templates.html#the-printer-variable
    {% endif %}
    {% if "bed_mesh" in printer and "probe" in printer %}
        _PRINT_CONSOLE T="Building bed mesh"
        BED_MESH_CALIBRATE
    {% endif %}
    {% if "z_calibration" in printer %}
        _PRINT_CONSOLE T="Calibrating Z-offset"
        CALIBRATE_Z
    {% endif %}
    _PRINT_CONSOLE T="Applying additional plate Z-offset"
    _APPLY_PLATE_OFFSET
    PARK_CENTER

[gcode_macro _VERIFY_QUAD_GANTRY_LEVEL]
gcode:
    {% if not printer.quad_gantry_level.applied %}
        {action_raise_error("QUAD_GANTRY_LEVEL failed. Aborting...")}
        CANCEL_PRINT
    {% endif %}

# deprecated to transition to a more consistent VERB_NOUN command naming
[gcode_macro PRINT_END]
description: Legacy alias for PRINT_END
gcode:
    END_PRINT

[gcode_macro END_PRINT]
description: Called at the end of each print job. Moves head into a safe parking position
gcode:
    ; explicitely not use SAVE_GCODE_STATE here
    REMOVE_TOOLHEAD_FROM_PRINT
    G92 E0
    M400                                        ; wait for buffer to clear
    TURN_OFF_HEATERS
    _CONTROL_BED_RELAY STATE=0
    M107                                        ; turn off fan

    _ADD_PRINT_TIME
    _SD_PRINT_STATS PREFIX="done"
    SD_PRINTER_STATS

    RESET_RETRACTION
    RESET_PRESSURE_ADVANCE
    M220 S100                                   ; reset speed factor
    M221 S100                                   ; reset extrusion multiplier
    CONTROL_STATUS_LIGHT STATUS=normal

[gcode_macro LOAD_FILAMENT]
gcode:
    {% set bowden_length = printer["gcode_macro _GLOBALS"].filament_loading_bowden_length|float %}

    SAVE_GCODE_STATE NAME=state_load_filament
    PARK_PURGE
    M83                       ; set extruder to relative
    G1 E{bowden_length} F1200 ; quickly load filament down the bowden
    G1 E30 F300               ; slower extrusion for hotend path
    G1 E10 F120               ; prime nozzle with filament
    G4 P4000                  ; let filament ooze a little bit
    CLEAN_NOZZLE
    RESTORE_GCODE_STATE NAME=state_load_filament

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set bowden_length = printer["gcode_macro _GLOBALS"].filament_loading_bowden_length|float %}

    SAVE_GCODE_STATE NAME=state_unload_filament
    PARK_PURGE
    M83                             ; set extruder to relative
    G1 E10 F300                     ; extrude a little to soften tip
    G1 E-{bowden_length + 45} F1200 ; retract filament completely
    CLEAN_NOZZLE
    RESTORE_GCODE_STATE NAME=state_unload_filament

[gcode_macro CLEAN_NOZZLE]
description: Rub off icky plastic snot from the nozzle
gcode:
    {% set nozzle_brush_start = printer["gcode_macro _GLOBALS"].nozzle_brush_start %}
    {% set nozzle_brush_end = printer["gcode_macro _GLOBALS"].nozzle_brush_end %}
    {% set nozzle_brush_approach_position = printer["gcode_macro _GLOBALS"].nozzle_brush_approach_position %}
    {% set travel_speed = printer["gcode_macro _GLOBALS"].travel_speed|float %}
    {% set cleaning_speed = printer["gcode_macro _GLOBALS"].nozzle_cleaning_speed|float %}

    {% if not printer.extruder.can_extrude %}
        _PRINT_CONSOLE T="Extruder too cold to clean. Skipping..."
    {% elif nozzle_brush_start %}
        SAVE_GCODE_STATE NAME=state_clean_nozzle
        _CONDITIONAL_HOME
        G90
    
        {% if nozzle_brush_approach_position %}
            G0 X{nozzle_brush_approach_position[0]} Y{nozzle_brush_approach_position[1]} Z{nozzle_brush_approach_position[2]} F{travel_speed * 60}
        {% endif %}
        G0 X{nozzle_brush_start[0]} Y{nozzle_brush_start[1]} Z{nozzle_brush_start[2]} F{travel_speed * 60}
        {% for _ in range(1) %}
            G0 X{nozzle_brush_end[0]} Y{nozzle_brush_end[1]} Z{nozzle_brush_end[2]} F{cleaning_speed * 60}
            G0 X{nozzle_brush_start[0]} Y{nozzle_brush_start[1]} Z{nozzle_brush_start[2]} F{cleaning_speed * 60}
        {% endfor %}
    
        G91
        G0 Z25 F{travel_speed * 60}
    
        RESTORE_GCODE_STATE NAME=state_clean_nozzle
    {% else %}
        _PRINT_CONSOLE T="No nozzle brush position configured. Skipping..."
    {% endif %}

# deprecated to transition to a more consistent VERB_NOUN command naming
[gcode_macro PRIME_LINE]
description: Legacy alias for PRINT_PRIME_LINE
gcode:
    PRINT_PRIME_LINE {rawparams}

# adapted from: https://github.com/zellneralex/klipper_config/blob/35605447143cb65b5c24bb378dcba4823e8d8a6e/macro.cfg#L395-L423
[gcode_macro PRINT_PRIME_LINE]
description: Primes the hotend with filament to save on printing a skirt
gcode:
    {% set y_offset = params.Y_OFFSET|default(0)|float %}

    {% set prime_length = printer["gcode_macro _GLOBALS"].prime_line_length|float %}
    {% set prime_extrusion = printer["gcode_macro _GLOBALS"].prime_line_extrusion_length|float %}
    {% set prime_height = printer["gcode_macro _GLOBALS"].prime_line_layer_height|float %}
    {% set prime_speed = printer["gcode_macro _GLOBALS"].prime_line_speed|float %}
    {% set travel_speed = printer["gcode_macro _GLOBALS"].travel_speed|float %}

    {% set prime_segments = 15 %}
    {% set segment_length = prime_length|float / prime_segments|int %}
    {% set segment_extrusion = prime_extrusion|float / prime_segments|int %}

    SAVE_GCODE_STATE NAME=state_print_prime_line
    _PRINT_CONSOLE T="Printing prime line"
    _CONDITIONAL_HOME
    G92 E0                                                        ; reset extruder
    G90                                                           ; absolute positioning
    M83
    G0 Y{y_offset} X40 F{travel_speed * 60}                       ; go to tongue of print bed
    G0 Z{prime_height}                                            ; move bed to nozzle
    G91                                                           ; relative positioning
    {% for i in range(prime_segments) %}
        G1 X{segment_length} E{segment_extrusion} F{prime_speed * 60} ; first line
    {% endfor %}
    G0 Y0.4
    {% for i in range(prime_segments) %}
        G1 X-{segment_length} E{segment_extrusion} F{prime_speed * 60} ; second line
    {% endfor %}
    G10
    ;G0 Z3.0                                                       ; move nozzle to prevent scratch
    ;G11
    RESTORE_GCODE_STATE NAME=state_print_prime_line

# Inspired by Marlin's M16 https://marlinfw.org/docs/gcode/M016.html
[gcode_macro CHECK_PRINTER_COMPATIBILITY]
description: Check if GCode is compatible with printer. Abort if not.
gcode:
    {% if "MAKE" in params %}
        {% set check_make = params.MAKE %}
    {% endif %}
    {% if "MODEL" in params %}
        {% set check_model = params.MODEL %}
    {% endif %}
    {% if "NAME" in params %}
        {% set check_name = params.NAME %}
    {% endif %}

    {% set printer_make = printer["gcode_macro _GLOBALS"].printer_make %}
    {% set printer_model = printer["gcode_macro _GLOBALS"].printer_model %}
    {% set printer_name = printer["gcode_macro _GLOBALS"].printer_name %}

    {% set compatible = True %}
    {% if check_make is defined and check_make != printer_make %}
        {% set compatible = False %}
    {% endif %}
    {% if check_model is defined and check_model != printer_model %}
        {% set compatible = False %}
    {% endif %}
    {% if check_name is defined and check_name != printer_name %}
        {% set compatible = False %}
    {% endif %}

    {% if not compatible %}
        CONTROL_STATUS_LIGHT STATUS=error
        {action_raise_error("GCode is not compatible with printer")}
    {% else %}
        _PRINT_CONSOLE T='GCode is compatible with printer'
    {% endif %}

[gcode_macro _CONTROL_BED_RELAY]
description: Control safety relay for bed power
gcode:
    {% if params.STATE == "1" %}
        {% set state = "on" %}
    {% else %}
        {% set state = "off" %}
    {% endif %}

    {% set bed_relay = printer["gcode_macro _GLOBALS"].bed_relay_name %}

    {% if bed_relay != "" %}
        {% if state == "on" %}
            _PRINT_CONSOLE T="Enabling bed power"
        {% elif state == "off" %}
            _PRINT_CONSOLE T="Disabling bed power"
        {% endif %}
        {action_call_remote_method("set_device_power", device=bed_relay, state=state)}
    {% endif %}

[gcode_macro RESET_PRESSURE_ADVANCE]
description: Resets pressure advance settings to configured defaults
gcode:
    {% set advance = printer.configfile.settings["extruder"]["pressure_advance"]|float %}
    {% set smooth_time = printer.configfile.settings["extruder"]["pressure_advance_smooth_time"]|float %}

    SET_PRESSURE_ADVANCE ADVANCE={advance} SMOOTH_TIME={smooth_time}

[gcode_macro RESET_RETRACTION]
description: Resets retraction settings to configured defaults
gcode:
    {% set retract_length = printer.configfile.settings.firmware_retraction.retract_length|float %}
    {% set retract_speed = printer.configfile.settings.firmware_retraction.retract_speed|float %}
    {% set unretract_extra_length = printer.configfile.settings.firmware_retraction.unretract_extra_length|float %}
    {% set unretract_speed = printer.configfile.settings.firmware_retraction.unretract_speed|float %}
    {% set lift_z = printer.configfile.settings.firmware_retraction.lift_z|float %}

    SET_RETRACTION RETRACT_LENGTH={retract_length} RETRACT_SPEED={retract_speed} UNRETRACT_SPEED={unretract_speed} UNRETRACT_EXTRA_LENGTH={unretract_extra_length} LIFT_Z={lift_z}
