[gcode_macro CONTROL_CHAMBER_LIGHT]
description: Toggle chamber lighting with preset color moods
variable_enabled: False
gcode:
    {% set lighting_mood = params.MOOD %}

    {% set lights = printer["gcode_macro _GLOBALS"].chamber_lights %}

    {% if not lighting_mood %}
        {% if enabled %}
            {% set lighting_mood = "off" %}
        {% else %}
            {% set lighting_mood = "white" %}
        {% endif %}
    {% else %}
        {% set lighting_mood = lighting_mood|lower %}
    {% endif %}

    {% if lighting_mood == "off" %}
        _PRINT_CONSOLE T="Turning off chamber lights"
        SET_GCODE_VARIABLE MACRO=CONTROL_CHAMBER_LIGHT VARIABLE=enabled VALUE=False
        {% for light in lights %}
            {% if light.type == "neopixel" %}
                SET_LED LED={light.name} SYNC=0 RED=0 GREEN=0 BLUE=0
            {% elif light.type == "single" %}
                SET_PIN PIN={light.name} VALUE=0
            {% endif %}
        {% endfor %}
    {% else %}
        _PRINT_CONSOLE T="{"Turning on chamber lights, mood %s" % (lighting_mood)}"
        SET_GCODE_VARIABLE MACRO=CONTROL_CHAMBER_LIGHT VARIABLE=enabled VALUE=True

        {% for light in lights %}
            # accept any mood for single color chamber lights
            {% if light.type == "single" %}
                SET_PIN PIN={light.name} VALUE={light.brightness|float}
            {% elif lighting_mood == "white" %}
                {% if "W" in printer["neopixel " + light.name].color_data[0] %}
                    _SET_LED_CALIBRATED LED={light.name} WHITE={1.0 * light.brightness|float} RED=0.0 GREEN=0.0 BLUE=0.0
                {% else %}
                    _SET_LED_CALIBRATED LED={light.name} RED={1.0 * light.brightness|float} GREEN={1.0 * light.brightness|float} BLUE={1.0 * light.brightness|float}
                {% endif %}
            {% elif lighting_mood == "voron" %}
                _SET_LED_CALIBRATED LED={light.name} RED={1.0 * light.brightness|float}
            {% elif lighting_mood == "vapor" %}
                _SET_LED_CALIBRATED LED={light.name} RED={0.5 * light.brightness|float} BLUE={1.0 * light.brightness|float}
            {% elif lighting_mood == "done" %}
                _SET_LED_CALIBRATED LED={light.name} RED={0.35 * light.brightness|float} GREEN={0.8 * light.brightness|float} BLUE={0.07 * light.brightness|float}
            {% else %}
                _PRINT_CONSOLE ERROR=1 T="Invalid lighting mood: {lighting_mood}"
            {% endif %}
        {% endfor %}
    {% endif %}

[gcode_macro CONTROL_STATUS_LIGHT]
variable__normal_status_color: None
gcode:
    {% set status = params.STATUS|default("normal") %}

    {% set led_name = printer["gcode_macro _GLOBALS"].status_led_name %}
    {% set led_start = printer["gcode_macro _GLOBALS"].status_led_start %}

    {% set status_colors = {"off": (0.0, 0.0, 0.0), "error": (1.0, 0.0, 0.0), "warning": (0.97, 0.75, 0.24), "heating": (0.9, 0.2, 0.49), "calibrating": (0.05, 0.72, 0.93), "printing": (0.23, 0.83, 0.06)} %}

    {% if led_name %}
        {% if not _normal_status_color %}
            {% set normal_status_color_red = printer["neopixel " + led_name].color_data[led_start][0] %}
            {% set normal_status_color_green = printer["neopixel " + led_name].color_data[led_start][1] %}
            {% set normal_status_color_blue = printer["neopixel " + led_name].color_data[led_start][2] %}

            SET_GCODE_VARIABLE MACRO=CONTROL_STATUS_LIGHT VARIABLE=_normal_status_color VALUE='[{normal_status_color_red}, {normal_status_color_green}, {normal_status_color_blue}]'
        {% endif %}

        {% if status == "normal" and _normal_status_color %}
            _SET_STATUS_LED RAW=1 RED={_normal_status_color[0]} GREEN={_normal_status_color[1]} BLUE={_normal_status_color[2]}
            SET_GCODE_VARIABLE MACRO=CONTROL_STATUS_LIGHT VARIABLE=_normal_status_color VALUE=None
        {% else %}
            {% if status in status_colors %}
                _SET_STATUS_LED RED={status_colors[status][0]} GREEN={status_colors[status][1]} BLUE={status_colors[status][2]}
            {% endif %}
        {% endif %}
    {% endif %}

[gcode_macro _SET_STATUS_LED]
description: Encapsulates settings one or multiple status LEDs
gcode:
    {% set raw = params.RAW|default("0") %}
    {% set red = params.RED|float %}
    {% set green = params.GREEN|float %}
    {% set blue = params.BLUE|float %}

    {% set led_name = printer["gcode_macro _GLOBALS"].status_led_name %}
    {% set led_start = printer["gcode_macro _GLOBALS"].status_led_start %}
    {% set led_count = printer["gcode_macro _GLOBALS"].status_led_count %}
    {% if led_count == 0 %}
        {% set led_count = printer["neopixel " + led_name].color_data | length %}
    {% endif %}

    {% for i in range(led_count) %}
        {% if raw == "1" %}SET_LED{% else %}_SET_LED_CALIBRATED{% endif %} LED={led_name} TANSMIT={0 if i < led_count - 1 else 1} INDEX={1 + i if led_start < 1 else led_start + i} RED={red} GREEN={green} BLUE={blue}
    {% endfor %}

[gcode_macro _SET_LED_CALIBRATED]
description: Adjusts RGB values to compensate for differing brightness between the subpixels. Determined by setting LEDs to pure white and adjusting subpixel brightness until the desiered temperature was reached.
gcode:
    {% set led = params.LED %}

    {% set calibrated_red_multiplier = printer["gcode_macro _GLOBALS"].led_calibration_data[led][0] %}
    {% set calibrated_green_multiplier = printer["gcode_macro _GLOBALS"].led_calibration_data[led][1] %}
    {% set calibrated_blue_multiplier = printer["gcode_macro _GLOBALS"].led_calibration_data[led][2] %}

    {% set ns = namespace(param_str="") %}
    {% for param in params %}
        {% if param|lower not in ["led", "red", "green", "blue", "white", "sync"] %}
            {% set ns.param_str = "%s %s='%s'" % (ns.param_str, param, params[param]) %}
        {% endif %}
    {% endfor %}

    SET_LED LED={led} SYNC=0 {% if params.RED %}RED={params.RED|float * calibrated_red_multiplier}{% endif %} {% if params.GREEN %}GREEN={params.GREEN|float * calibrated_green_multiplier}{% endif %} {% if params.BLUE %}BLUE={params.BLUE|float * calibrated_blue_multiplier}{% endif %} {%if params.WHITE %}WHITE={params.WHITE|float}{% endif %} {ns.param_str}

[delayed_gcode ENABLE_PROGRESS_LED]
initial_duration: 0.1
gcode:
    {% if not printer["gcode_macro _GLOBALS"].globals_loaded %}
        UPDATE_DELAYED_GCODE ID=ENABLE_PROGRESS_LED DURATION=1
    {% else %}
        _ACTIVATE_PROGRESS_LED
    {% endif %}

[gcode_macro _ACTIVATE_PROGRESS_LED]
gcode:
    {% set led_name = printer["gcode_macro _GLOBALS"].progress_led_name %}
    {% set led_start = printer["gcode_macro _GLOBALS"].progress_led_start %}
    {% set led_count = printer["gcode_macro _GLOBALS"].progress_led_count %}

    {% if led_name %}
        {% if led_count == 0 %}
            {% set led_count = printer["neopixel " + led_name].color_data | length %}
        {% endif %}

        {% set calibrated_red_multiplier = printer["gcode_macro _GLOBALS"].led_calibration_data[led_name][0] %}
        {% set calibrated_green_multiplier = printer["gcode_macro _GLOBALS"].led_calibration_data[led_name][1] %}
        {% set calibrated_blue_multiplier = printer["gcode_macro _GLOBALS"].led_calibration_data[led_name][2] %}

        {% for i in range(led_count) %}
            SET_LED_TEMPLATE LED={led_name} INDEX={led_start + 1 + i}  TEMPLATE=led_print_progress param_calibration_data="{printer["gcode_macro _GLOBALS"].led_calibration_data[led_name]}" param_start_color="(0.5, 0.0, 1.0, 0.0)" param_completion_color="(1.0, 0.0, 0.0, 0.0)"
        {% endfor %}
    {% endif %}

# Simple progress lighting: from 0% to completion_threshold% fade to start_color, and then transition to completion_color
[display_template led_print_progress]
param_idle_color: (0.0, 0.0, 0.0, 1.0)
param_calibration_data: (1.0, 1.0, 1.0)
param_start_color: (0.0, 0.0, 0.0, 0.0)
param_completion_color: (0.0, 0.0, 0.0, 0.0)
text:
    {% if param_start_color %}
        {% if printer.virtual_sdcard.is_active %}
            {% set progress = printer.virtual_sdcard.progress %}
            {% set completion_threshold = 0.9 %}

            {% if progress <= completion_threshold %}
                {% set scale = progress * (1.0 / completion_threshold) %}

                {param_start_color[0] * param_calibration_data[0] * scale}, {param_start_color[1] * param_calibration_data[1] * scale}, {param_start_color[1] * param_calibration_data[2] * scale}, {param_start_color[1] * scale}
            {% else %}
                {% set threshold_scale = (progress - completion_threshold) / (1 - completion_threshold) %}
                {% set threshold_scaled_colors = ((param_completion_color[0] - param_idle_color[0]) * threshold_scale, (param_completion_color[1] - param_idle_color[1]) * threshold_scale, (param_completion_color[2] - param_idle_color[2]) * threshold_scale, (param_completion_color[3] - param_idle_color[3]) * threshold_scale) %}

                {threshold_scaled_colors[0] * param_calibration_data[0]}, {threshold_scaled_colors[1] * param_calibration_data[1]}, {threshold_scaled_colors[2] * param_calibration_data[2]}, {threshold_scaled_colors[3]}
            {% endif %}
        {% elif printer.idle_timeout.state in ["Printing", "Paused"] %}
            {param_idle_color[0]}, {param_idle_color[1]}, {param_idle_color[2]}, {param_idle_color[3]}
        {% else %}
            0.0, 0.0, 0.0, 0.0
        {% endif %}
    {% else %}
        0.0, 0.0, 0.0, 0.0
    {% endif %}
